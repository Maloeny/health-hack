// "class" DeviceRegistry
pragma solidity ^0.4.0;
contract DeviceRegistry {
	
	// mappings to look up device names, device ids and addresses
	mapping (address => string) _addressToDeviceName;
	mapping (uint => address) _deviceIdToDeviceAddress;
	mapping (string => address) _deviceNameToAddress;
	
	// number of devices registered to user
	uint _numberOfDevices;
	
	// admin address, can delete registry and data
	address _registryAdmin;
	
	// allowed to administrate devices only, not everything
	address _deviceAdmin;
	
	// if a newer version of this registry is available, force users to use it
	bool _registrationDisabled;

	function DataRegistry() {
		_registryAdmin = msg.sender;
		_deviceAdmin = msg.sender; // can be changed later
		_numberOfDevices = 0;
		_registrationDisabled = false;
	}

	function register(string name, address deviceAddress) returns (int result) {
		if (msg.sender != _registryAdmin || msg.sender != _deviceAdmin){
	        throw;
	    } else if (_deviceNameToAddress[name] != address(0)) {
			// name already taken
			result = -1;
		} else if (bytes(_addressToDeviceName[deviceAddress]).length != 0) {
			// device address is already registered
			result = -2;
		} else if (bytes(name).length >= 64) {
			// name too long
			result = -3;
		} else if (_registrationDisabled){
			// registry is disabled because a newer version is available
			result = -4;
		} else {
			_addressToDeviceName[deviceAddress] = name;
			_deviceNameToAddress[name] = deviceAddress;
			_deviceIdToDeviceAddress[_numberOfDevices] = deviceAddress;
			_numberOfDevices++;
			result = 0; // success
		}
	}
	
	function getNumberOfDevices() constant returns (uint numberOfDevices) {
		numberOfDevices = _numberOfDevices;
	}

	function getAddressOfName(string name) constant returns (address addr) {
		addr = _deviceNameToAddress[name];
	}

	function getNameOfAddress(address addr) constant returns (string name) {
		name = _addressToDeviceName[addr];
	}
	
	function getAddressOfId(uint id) constant returns (address addr) {
		addr = _deviceIdToDeviceAddress[id];
	}

	function unregister() returns (string unregisteredDeviceName) {
		unregisteredDeviceName = _addressToDeviceName[msg.sender];
		_addressToDeviceName[msg.sender] = "";
		_deviceNameToAddress[unregisteredDeviceName] = address(0);
		// _deviceIdTodeviceAddress is never deleted on purpose
	}
	
	function adminUnregister(string name) {
		if (msg.sender == _registryAdmin || msg.sender == _deviceAdmin) {
			address addr = _deviceNameToAddress[name];
			_addressToDeviceName[addr] = "";
			_deviceNameToAddress[name] = address(0);
			// _deviceIdToDeviceAddress is never deleted on purpose
		}
	}
	
	function adminSetRegistrationDisabled(bool registrationDisabled) {
		// currently, the code of the registry can not be updated once it is
		// deployed. if a newer version of the registry is available, account
		// registration can be disabled
		if (msg.sender == _registryAdmin) {
			_registrationDisabled = registrationDisabled;
		}
	}
	
	function adminSetDeviceAdministrator(address deviceAdmin) {
		if (msg.sender == _registryAdmin) {
			_deviceAdmin = deviceAdmin;
		}
	}
	
	function adminDeleteRegistry() {
		if (msg.sender == _registryAdmin) {
			suicide(_registryAdmin); // this is a predefined function, it deletes the contract and returns all funds to the admin's address
		}
	}
}
